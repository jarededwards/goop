    apps/Deployment:
      health.lua: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        
        if obj.status ~= nil then
          local replicas = obj.spec.replicas or 1
          local readyReplicas = obj.status.readyReplicas or 0
          local availableReplicas = obj.status.availableReplicas or 0
          
          if obj.status.conditions ~= nil then
            for i, condition in pairs(obj.status.conditions) do
              if condition.type == "Progressing" and condition.status == "True" and condition.reason == "NewReplicaSetAvailable" then
                if readyReplicas == replicas and availableReplicas == replicas then
                  hs.status = "Healthy"
                  hs.message = "Deployment is healthy"
                  return hs
                end
              end
            end
          end
          
          if readyReplicas < replicas then
            hs.status = "Progressing"
            hs.message = string.format("Waiting for deployment: %d/%d ready", readyReplicas, replicas)
          end
        end
        
        return hs
    apps/StatefulSet:
      health.lua: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""

        if obj.status ~= nil then
          local replicas = obj.spec.replicas or 1
          local readyReplicas = obj.status.readyReplicas or 0
          local currentReplicas = obj.status.currentReplicas or 0

          if readyReplicas == replicas and currentReplicas == replicas then
            hs.status = "Healthy"
            hs.message = "StatefulSet is ready"
          else
            hs.status = "Progressing"
            hs.message = string.format("Waiting for StatefulSet: %d/%d ready", readyReplicas, replicas)
          end
        end

        return hs
    external-secrets.io/ClusterSecretStore:
      health.lua: |
        hs = {}
        hs.status = "Progressing"
        hs.message = "Waiting for ClusterSecretStore to be ready"
        
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Ready" then
                if condition.status == "True" then
                  hs.status = "Healthy"
                  hs.message = "ClusterSecretStore is ready"
                else
                  hs.status = "Degraded"
                  hs.message = condition.message or "ClusterSecretStore is not ready"
                end
                return hs
              end
            end
          end
        end
        
        return hs