apiVersion: batch/v1
kind: Job
metadata:
  name: clustersecretstore-sync-je-kon-10
  namespace: external-secrets
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  template:
    spec:
      serviceAccountName: external-secrets-clustersecretstore-sync
      restartPolicy: Never
      containers:
      - name: sync
        image: bitnami/kubectl:1.28
        command: ["/bin/bash"]
        args:
        - -c
        - |
          set -e
          echo "Starting ClusterSecretStore synchronization for cluster: je-kon-10"
          
          # Check if temp secret exists
          TEMP_SECRET_NAME="temp-clustersecretstore-je-kon-10"
          if ! kubectl get secret $TEMP_SECRET_NAME -n default >/dev/null 2>&1; then
            echo "ERROR: Temporary ClusterSecretStore secret not found. Please run the bootstrap API first."
            exit 1
          fi
          
          # Wait for ClusterSecretStore CRD to be ready
          echo "Waiting for external-secrets CRDs to be ready..."
          timeout=300  # 5 minutes
          elapsed=0
          interval=10
          
          while [ $elapsed -lt $timeout ]; do
            if kubectl get crd clustersecretstores.external-secrets.io >/dev/null 2>&1; then
              echo "SUCCESS: ClusterSecretStore CRD is ready"
              break
            fi
            echo "ClusterSecretStore CRD not ready yet, waiting..."
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "ERROR: ClusterSecretStore CRD did not become ready within timeout"
            exit 1
          fi
          
          # Read all secrets from temp secret and build fake provider data
          echo "Building ClusterSecretStore with fake provider..."
          
          # Start building the ClusterSecretStore YAML with correct API version
          cat <<'HEADER' > /tmp/clustersecretstore.yaml
          apiVersion: external-secrets.io/v1
          kind: ClusterSecretStore
          metadata:
            name: je-kon-10-secret-store
            labels:
              app.kubernetes.io/name: konstruct-clustersecretstore
              konstruct.io/cluster: je-kon-10
          spec:
            provider:
              fake:
                data:
          HEADER
          
          # Read each key from the temp secret and create fake provider entries
          for key in $(kubectl get secret $TEMP_SECRET_NAME -n default -o json | jq -r '.data | keys[]'); do
            value=$(kubectl get secret $TEMP_SECRET_NAME -n default -o json | jq -r ".data[\"$key\"]" | base64 -d)
            
            # Parse the key format (e.g., "cloudflare.api-token" -> key="/cloudflare", property="api-token")
            group=$(echo $key | cut -d'.' -f1)
            property=$(echo $key | cut -d'.' -f2-)
            
            # Check if we already have this group
            if ! grep -q "key: \"/$group\"" /tmp/clustersecretstore.yaml; then
              # New group, create the entry
              echo "                - key: \"/$group\"" >> /tmp/clustersecretstore.yaml
              echo "                  value: '{\"$property\":\"$value\"}'" >> /tmp/clustersecretstore.yaml
              echo "                  version: \"v1\"" >> /tmp/clustersecretstore.yaml
            else
              # Existing group, update the JSON value
              # This is complex in bash, so we'll rebuild the JSON
              existing_line=$(grep -A1 "key: \"/$group\"" /tmp/clustersecretstore.yaml | grep "value:" | sed "s/.*value: '//g" | sed "s/'.*//g")
              # Remove the closing brace and add new property
              new_json=$(echo $existing_line | sed 's/}$//' | sed "s/$/,\"$property\":\"$value\"}/")
              # Replace the line in the file
              sed -i "/key: \"\\/$group\"/,+1 s/value: '.*'/value: '$new_json'/" /tmp/clustersecretstore.yaml
            fi
          done
          
          # Apply the ClusterSecretStore
          kubectl apply -f /tmp/clustersecretstore.yaml
          
          # Wait for ClusterSecretStore to be ready
          echo "Waiting for ClusterSecretStore to become ready..."
          timeout=300  # 5 minutes
          elapsed=0
          interval=10
          
          while [ $elapsed -lt $timeout ]; do
            if kubectl get clustersecretstore je-kon-10-secret-store -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' | grep -q "True"; then
              echo "SUCCESS: ClusterSecretStore je-kon-10-secret-store is ready"
              break
            fi
            echo "ClusterSecretStore not ready yet, waiting..."
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "ERROR: ClusterSecretStore did not become ready within timeout"
            exit 1
          fi
          
          # Delete the temporary secret now that ClusterSecretStore is healthy
          echo "Deleting temporary secret $TEMP_SECRET_NAME..."
          kubectl delete secret $TEMP_SECRET_NAME -n default
          
          echo "ClusterSecretStore synchronization completed successfully"
        env:
        - name: CLUSTER_NAME
          value: "je-kon-10"
      backoffLimit: 3
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-clustersecretstore-sync
  namespace: external-secrets
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-secrets-clustersecretstore-sync
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "delete"]
- apiGroups: ["external-secrets.io"]
  resources: ["clustersecretstores"]
  verbs: ["create", "get", "list", "patch", "update"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-secrets-clustersecretstore-sync
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-secrets-clustersecretstore-sync
subjects:
- kind: ServiceAccount
  name: external-secrets-clustersecretstore-sync
  namespace: external-secrets